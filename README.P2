  @file README.doc
  @brief 15-410 P2 : Thread Library

  @author Ishant(idawer) and Shelton(sdsouza)
  @bug No known bugs

  --------------------Thread Library Main ----------------------------------

 A. thr_create : The parent first allocates space for the child's TCB and
                 stack. It then creates the child using the thread fork
                 syscall. On return from thr wrapper, both the parent and
                 child resume at the next instruction from where thread fork
                 was called. The child has to wait, yielding to the parent,
                 till the parent inserts its tcb into the global list.

 Design Descisions 

  1.Thread_fork system call

    Problem : Executing child thread on a its newly allocated stack on return
    from system call. 

    Implementation : We decided a common return point for both the parent
    as well as the child on return from the thread_fork wrapper. Thus,
    two parameters are passed to the thread_fork wrapper, "common" return 
    address and the stack pointer of the child stack. Before, issuing
    the fork syscall, the return address is pushed into the child's stack
    which is popped later using ret instruction so that the child returns
    to the common return point. Before the child returns, its base pointer is
    set to be 160 bytes above the stack pointer so that some local computation
    can be done by the child on return from the wrapper. The stack buffer
    provided above the child stack helps in this case. 

    Problem : Child should be able to access its tcb contents on return from
    syscall wrapper.

    Implementation : We use the "register" keyword to store the pointer to
    the child's tcb before calling the syscall wrapper. When the child returns,
    it can access use the register and thus access its tcb conveniently. 
    Here, we took advantage of the fact stated in the Pebbles kernel spec
    which says that all registers except %eax will be initailized to the
    same values as the corresponding registers in the old(parent) thread.

 B. thr_join : The parent joins on the thread specified and waits if the
    thr_exit   child has not exited yet. This is achieved by checking the
               status field in the child's tcb. If set to 1, the parent
               frees the child's data structures and returns else it waits
               till the child signals (using make_runnable) from thr_exit.

 Design Descisions

  1. Race in checking the child's status and freeing child's data structures

     Problem : There might be a race when the parent joins at the same time
     when the child is exiting. The follwing issues can exist :
     1. Parent checks the status flag, sees it set and immediately frees
        the child's data structures, however, the child has not yet called
        vanish and is still running on its stack.
     2. The parent puts itself into the child's waiter list but is not yet 
        descheduled. Now the child checks its waiter and makes it runnable
        without having any effect since the parent is not yet descheduled.
        This may result in a deadlock.

     Implementation : 
     1. We use a private lock(child's tcb)in both thr_join and thr_exit. The 
        advantage of using the child's lock is that this lock will have just two
        contenders, that is , the parent and its child and thus we will get 
        greater concurrency as opposed to keeping a parent's lock for 
        synchronization. 
     2. The solves the second problem however we still have to release the 
        lock in the child's exit before calling vanish., thus leaving a small 
        chance of the problem 1 still exisiting. As a solution to this, we 
        made a assembly wrapper for vanish syscall where we release the lock just 
        before the syscall is made. Since there are no stack related operations 
        performed between the lock release and making the call to vanish now, 
        problem 1 is solved.




























































































